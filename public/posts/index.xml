<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on My Programming Journey Blog</title>
    <link>http://localhost:1313/my-programming-journey/posts/</link>
    <description>Recent content in Posts on My Programming Journey Blog</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Sep 2025 15:01:37 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/my-programming-journey/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter 3: Testing the Service Layer - Adding Confidence to Go Code</title>
      <link>http://localhost:1313/my-programming-journey/posts/chapter-3-testing-service-layer/</link>
      <pubDate>Fri, 19 Sep 2025 15:01:37 +0200</pubDate>
      <guid>http://localhost:1313/my-programming-journey/posts/chapter-3-testing-service-layer/</guid>
      <description>&lt;p&gt;Time to add some confidence to my Go Todo app! After building the structure and file storage, I&amp;rsquo;m diving deep into testing. Starting with the service layer, where business logic lives and external dependencies need to be tamed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repo/branch&lt;/strong&gt;: &lt;a href=&#34;https://github.com/macesz/todo-go/blob/firs-unit-test/services/todo/service_test.go&#34;&gt;https://github.com/macesz/todo-go/blob/firs-unit-test/services/todo/service_test.go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-start-with-service-layer-tests-&#34;&gt;Why Start with Service Layer Tests? üéØ&lt;/h2&gt;
&lt;p&gt;The service layer is the perfect starting point for testing because it&amp;rsquo;s where your business logic lives, isolated from external concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Business logic isolation&lt;/strong&gt;: Test core functionality without I/O complications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast feedback&lt;/strong&gt;: No database calls, file operations, or network requests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency control&lt;/strong&gt;: Mock external services to test edge cases systematically&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design validation&lt;/strong&gt;: Interfaces and dependency injection patterns prove their worth here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think of it as testing the &amp;ldquo;brain&amp;rdquo; of your application without worrying about the &amp;ldquo;hands and feet&amp;rdquo; (I/O operations).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 2: From In-Memory to File Storage - Persistence Without Database Overhead üíæ</title>
      <link>http://localhost:1313/my-programming-journey/posts/chapter-2-file-storage/</link>
      <pubDate>Fri, 19 Sep 2025 13:35:54 +0200</pubDate>
      <guid>http://localhost:1313/my-programming-journey/posts/chapter-2-file-storage/</guid>
      <description>&lt;p&gt;Keeping the momentum going! Yesterday, I split my tiny Go Todo app into a layered structure. Today I added a file‚Äëbased storage adapter so todos survive restarts‚Äîwithout jumping to a full database (yet).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repo/branch&lt;/strong&gt;: &lt;a href=&#34;https://github.com/macesz/go-todo-chi/tree/file-storage&#34;&gt;https://github.com/macesz/go-todo-chi/tree/file-storage&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-start-in-memory-&#34;&gt;Why Start In-Memory? üß†&lt;/h2&gt;
&lt;p&gt;Starting with in-memory storage wasn&amp;rsquo;t just about being lazy‚Äîit was strategic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fast feedback&lt;/strong&gt;: No I/O, fewer moving parts to debug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on the domain&lt;/strong&gt;: Behavior first, storage later&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple wiring&lt;/strong&gt;: Great for sketching out architecture patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But of course, it came with trade-offs:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 1: Building a Go Todo App - Architecture and Structure üêπ‚ú®</title>
      <link>http://localhost:1313/my-programming-journey/posts/chapter-1-structuring-a-tiny-todo-app/</link>
      <pubDate>Fri, 19 Sep 2025 10:57:00 +0200</pubDate>
      <guid>http://localhost:1313/my-programming-journey/posts/chapter-1-structuring-a-tiny-todo-app/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m jumping into Go and documenting the journey so others can learn with me (and kindly correct me when I go off track). I&amp;rsquo;m starting simple, then growing step by step.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s focus: &lt;strong&gt;project structure&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-evolution-from-prototype-to-structure&#34;&gt;The Evolution: From Prototype to Structure&lt;/h2&gt;
&lt;p&gt;I moved from a single-file-style prototype to a small layered layout inspired by hexagonal/DDD ideas. The goal: keep the core logic clean and make storage and delivery swappable.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what my project structure looks like now:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
